#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#
# al-config: configuration for OCI CLI
#

. /usr/lib/al-config/functions

usage() {
    cat >&2 << EOF
Usage:

  Confugre OCI notification service topic OCID:
    ${0##*/} -T [topic OCID]

  Configure OCI CLI:
    ${0##*/} -u [user OCID] -t [tenancy OCID] -k [key file] -p [key passphrase file]

  Options:
    -T OCI notification service topic OCID
    -u OCI User OCID
    -t OCI Tenancy OCID
    -k The file that we read API private key from
    -p The file that we read API key passphrase from, provide this if API
       private key is encrypted
    -h Display this message
EOF
    exit 1
}

run_as_root_check

while getopts "u:k:p:t:T:h" OPTION; do
    case "$OPTION" in
      u)
        oci_user=$OPTARG
        ;;
      k)
        oci_api_private_key_from=$OPTARG
        ;;
      p)
        oci_key_passphrase_from=$OPTARG
        ;;
      t)
        oci_tenancy=$OPTARG
        ;;
      T)
        oci_topic=$OPTARG
        ;;
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
done

# nothing provided
if [ -z "$oci_topic" -a -z "$oci_user" -a -z "$oci_api_private_key_from" -a \
    -z "$oci_tenancy" ]; then
    usage
fi

# user, api praviate key, tenancy have to be provided together
if [ -n "$oci_user" -o -n "$oci_api_private_key_from" -o -n \
    "$oci_tenancy" ]; then
    if [ -z "$oci_user" -o -z "$oci_api_private_key_from" -o -z \
        "$oci_tenancy" ] ; then
        usage
    fi
fi

old_umask=$(umask)

### configure ###

## oci_cli.conf ##
if [ -n "$oci_user" -a -n "$oci_api_private_key_from" -a \
    -n "$oci_tenancy" ]; then

    if [ ! -r "$oci_api_private_key_from" ]; then
        echo "Could not read file $oci_api_private_key_from" >&2
        exit 1
    fi

    oci_api_private_key=$(read_file "$oci_api_private_key_from")
    if [ -z "$oci_api_private_key" ]; then
        echo "Invalid private key in $oci_api_private_key_from" >&2
        exit 1
    fi

    require_passphrase=0
    # check if the private key is encrytped
    # line 2: ^Proc-Type: 4,ENCRYPTED$
    if sed -n '2 p' "$oci_api_private_key_from" | \
        grep -q "^Proc-Type:.*ENCRYPTED$"; then
        require_passphrase=1
    fi

    oci_key_passphrase=""
    if [ $require_passphrase -eq 1 ]; then
        if [ -z "$oci_key_passphrase_from" ]; then
            echo "Key passphrase is required." >&2
            exit 1
        fi
        if [ ! -r "$oci_key_passphrase_from" ]; then
            echo "Could not read file $oci_key_passphrase_from" >&2
            exit 1
        fi
        oci_key_passphrase=$(read_file "$oci_key_passphrase_from")
    fi

    # validate OCID
    if [[ ! $oci_user =~ ^ocid[0-9]\.user\. ]]; then
        echo "Invalid user OCID $oci_user" >&2
        exit 2
    fi
    if [[ ! $oci_tenancy =~ ^ocid[0-9]\.tenancy\. ]]; then
        echo "Invalid tenancy OCID $oci_tenancy" >&2
        exit 2
    fi
    # calculate the public key fingerprint
    if [ $require_passphrase -eq 1 ]; then
        oci_key_fingerprint=$(openssl rsa -passin file:$oci_key_passphrase_from \
            -pubout -outform DER -in $oci_api_private_key_from 2>/dev/null | \
            openssl md5 -c | awk '{print $2}')
    else
        oci_key_fingerprint=$(openssl rsa -pubout -outform DER \
            -in $oci_api_private_key_from 2>/dev/null | openssl md5 -c | \
            awk '{print $2}')
    fi

    region=$(curl -sfm 25 \
        http://169.254.169.254/opc/v1/instance/canonicalRegionName 2>/dev/null)

    umask 0066
    # oci_cli.conf
    cat > $oci_cli_config_file <<CONFIG
[DEFAULT]
user = $oci_user
key_file = $oci_api_key_file
fingerprint = $oci_key_fingerprint
pass_phrase = $oci_key_passphrase
tenancy = $oci_tenancy
region = $region
CONFIG

    # oci_api_key.pem
    cat > $oci_api_key_file <<KEYFILE
    $oci_api_private_key
KEYFILE

    umask $old_umask
    log "Configured OCI CLI."
fi

## oci.conf ##
# topic is provided
# set topic OCID to oci.conf
if [ -n "$oci_topic" ]; then
    if [[ ! $oci_topic =~ ^ocid[0-9]\.onstopic\. ]]; then
        echo "Invalid notification service topic OCID $oci_topic" >&2
        exit 2
    fi
    umask 0066
    if [ ! -f "$oci_config_file" ]; then
        cat > $oci_config_file <<EOF
# This file is a bourne shell snippet, and is sourced by the
# script al-notify for configuration.

EOF
    fi
    if grep -q "^topic=" $oci_config_file; then
        sed -i "s/^topic=.*/topic=$oci_topic/g" $oci_config_file
    else
        cat >> $oci_config_file <<EOF
# OCI notification service topic OCID
topic=$oci_topic
EOF
    fi
    umask $old_umask
    log "Configured OCI notification service topic OCID."
fi
