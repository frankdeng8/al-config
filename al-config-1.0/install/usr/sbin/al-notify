#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#
# al-notify: Publish message via OCI notification service
#

. /usr/lib/al-config/functions

usage() {
    cat >&2 << EOF
Usage: ${0##*/} [OPTION]...
 -t Message title
 -f File that contains message body
 -h This message
EOF
    exit 1
}

# $1 - topic id
# $2 - title
# $3 - body
publish_message() {
    local out ret0 ret1 out0 out1
    log "Publishing message '$2'"
    # oci config auth
    if [ $instance_principal -eq 0 ]; then
        out0=$($OCI_CONFIG_AUTH ons message publish --topic-id "$1" \
            --title "$2" --body "$3" 2>&1)
        ret0=$?
        if [ $ret0 -ne 0 ]; then
            # wait a second, we do second try with instance principal auth
            sleep 1
            out1=$($OCI_INSTANCE_PRINCIPAL_AUTH ons message publish \
                --topic-id "$1" --title "$2" --body "$3" 2>&1)
            ret1=$?
            if [ $ret1 -ne 0 ]; then
                log_error "Failed to publish message '$2'"
                log_error "$out0"
                log_error "$out1"
                return $ret0
            else
                log "Published message '$2'"
            fi
        else
            log "Published message '$2'"
        fi
    else
        # instance principal auth
        out1=$($OCI_INSTANCE_PRINCIPAL_AUTH ons message publish \
            --topic-id "$1" --title "$2" --body "$3" 2>&1)
        ret1=$?
        if [ $ret1 -ne 0 ]; then
            log_error "Failed to publish message '$2'"
            log_error "$out1"
            return $ret1
        else
            log "Published message '$2'"
        fi
    fi
}

run_as_root_check

while getopts "t:f:h" OPTION; do
    case "$OPTION" in
      t)
        title=$OPTARG
        ;;
      f)
        file=$OPTARG
        ;;
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
done

[ -z "$title" -o -z "$file" ] && usage

if [ ! -f "$file" ]; then
    echo "$file doesn't exist." >&2
    exit 1
fi

# If oci config doesn't exist, exit.
if [ ! -f "$oci_config_file" ]; then
    log_error "OCI notification service topic is not configured." >&2
    log_error "Please configure OCI notification service topic OCID with al-config." >&2
    exit 2
fi

# source oci config file
. $oci_config_file

# If topic ocid is not set, exit.
if [ -z "$topic" ]; then
    log_error "OCI notification service topic is not configured." >&2
    log_error "Please configure OCI notification service topic OCID with al-config." >&2
    exit 1
fi

# If oci cli config or api key doesn't exist
# switch to instance principal authorization
if [ -f "$oci_cli_config_file" -a -f "$oci_api_key_file" ]; then
    instance_principal=0
else
    instance_principal=1
fi

OCI_INSTANCE_PRINCIPAL_AUTH="oci --auth instance_principal"
OCI_CONFIG_AUTH="oci --config-file $oci_cli_config_file"

# oci cli check: get region subscription
#if ! $OCI iam region-subscription list &>/dev/null; then
#    echo "OCI CLI is not properly configured." >&2
#    echo "Please run al-config to configure OCI CLI." >&2
#    exit 2
#fi

size=$(stat -c %s $file)
if [ $size -gt 65536 ]; then
    split -C 64K -d -a 1 $file ${file}.
    files="$(ls $file.*)"
    count=$(ls $file.* | wc -l)
    for f in $files; do
        i=${f##*.}
        t="[$(($i+1))/$count] $title"
        log "Publishing message '$t'"
        body=$(read_file "$f")
        publish_message "$topic" "$t" "$body"
        ret=$?
    done
    rm -f $files
else
    body=$(read_file "$file")
    publish_message "$topic" "$title" "$body"
    ret=$?
fi
exit $ret
