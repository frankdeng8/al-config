#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#
# al-update:
# - ksplice upgrade
# - yum-cron - yum upgrade
# - report exploit attemp(s) if detected
# - report ksplice show
# - report needs-restarting
# - send notification if needed

. /usr/lib/al-config/functions

usage() {
    cat >&2 << EOF
Usage: $0 [OPTION]...
 -h This message
EOF
    exit 1
}

generate_message_title () {
    local s=""
    local instance_name=$(get_instance_name)
    # default title:
    local title="AL: Status update on instance $instance_name"
    # set titile to "updates installed"
    if [ $status_ksplice = yes -o $status_yum = yes ]; then
       title="AL: Updates installed on instance $instance_name"
    fi
    # set title to "upgrade failed"
    if [ $status_ksplice = failed -o $status_yum = failed ]; then
       title="AL: Upgrade failed on instance $instance_name"
    fi
    echo "$title"
}

run_as_root_check

while getopts "h" OPTION; do
    case "$OPTION" in
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
done

acquire_lock

source_config_file

## status
# Types of status:
# 1. Updates installed: yes
# 2. No updates installed: no
# 3. Upgrade failed: failed

# set default status to no
status_ksplice=no
status_yum=no

# notify ?
notify=0

# temp file that contains command outputs
out_file=$(mktemp $work_dir/msg_XXXX)

### Update starts ###

# Pre-configure ksplice and yum for AL here
# in case ksplice-tools, uptrack or yum-cron get updated at this point.
/usr/lib/al-config/pre_config.sh

# ksplice all upgrade
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Ksplice upgrade report                                                |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
# TODO: what do we do if ksplice/uptrack is locked?
if command -v ksplice &>/dev/null; then
    echo "Running 'ksplice -y all upgrade'." | tee -a $out_file
    ksplice -y all upgrade 2>&1 | tee -a $out_file
    ret=${PIPESTATUS[0]}

else
    echo "Running 'uptrack-upgrade -y'." | tee -a $out_file
    uptrack-upgrade -y | tee -a $out_file
    ret=${PIPESTATUS[0]}
fi

if [ $ret -ne 0 ]; then
# set it to failed
    status_ksplice=failed
else
    # Expected output:
    # userspace packages:
    #  - new package updates - Complete!
    #  - no new package updates - No packages marked for update
    # userspace live patches:
    #  - new userspace live patches - Done!
    #  - no live patches -  Nothing to do.
    # kernel live patches:
    #  - new updates: Installing [6z9ikf22]
    #  - new rollback: Removing [6z9ikf22]
    #  - no new updates: Nothing to be done.

    # no user and kernel updates
    if grep -q "^Nothing to do." $out_file && grep -q "^Nothing to be done." \
        $out_file && grep -q "^No packages marked for update" $out_file; then
        status_ksplice=no
    fi
    if grep -q -E "^Complete\!|^Done\!|^Installing \[|^Removing \[" $out_file; then
        status_ksplice=yes
    fi
fi

# Pre-configure ksplice and yum for AL here
# in case ksplice-tools, uptrack or yum-cron get updated at this point.
/usr/lib/al-config/pre_config.sh

# yum-cron
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Yum upgrade report                                                    |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
# TODO: what do we do if yum is locked?
# e.g.:
# Existing lock /var/run/yum.pid: another copy is running as pid 21684.
# Another app is currently holding the yum lock; waiting for it to exit...

echo "Running 'yum-cron' with update cmd: default." | tee -a $out_file
yum-cron $yum_cron_config_file 2>&1 | tee -a $out_file

if [ ${PIPESTATUS[0]} -ne 0 ]; then
    status_yum=failed
else
    # new updates - The updates were successfully applied
    # no new updates -
    if tail $out_file | grep -q "^The updates were successfully applied"; then
        status_yum=yes
    fi
fi

### Update is done ###

# Set notify
# When do we notify?
# 1. No yum, ksplice updates: *Do Not Notify*
#      1) *Notify If* there is no last update
#         This means this is the first update, we want to notify with
#         "Status update"
#      2) *Notify If* - last update failed
#         This means the failure has recovered, and we want to notify with
#         "Status update".
# 2. Yum, or ksplice updates installed: *Always Notify*
# 3. Yum, or ksplice upgrade failed: *Notify*
#      1) *Do Not Notify If* - failure is same as last update
#         This means the failure has repeated, and we don't want to send
#         duplicate notification.
#
# so we record every update
# - update details for failures
# - update status, yum and ksplice

# 1. No yum, ksplice updates: *Do Not Notify*
if [ "$status_yum" = no -a "$status_ksplice" = no ]; then
    notify=0
    # 1) *Notify If* there is no last update
    # This means this is the first update, we want to notify with
    # Status update"
    [ ! -f "$al_state_file" -o ! -f "$al_update_file" ] &&
        notify=1
    # 2) *Notify If* - last update failed
    #    This means the failure has recovered, and we want to notify with
    #    "Status update".
    [ -f "$al_state_file" ] && grep -q failed "$al_state_file" &&
        notify=1
fi

# 2. Yum, or ksplice updates installed: *Always Notify*
[ "$status_yum" = yes -o "$status_ksplice" = yes ] &&
    notify=1

# 3. Yum, or ksplice upgrade failed: *Notify*
if [ "$status_yum" = failed -o "$status_ksplice" = failed ]; then
    notify=1
    # 1) *Do Not Notify If* - failure is same as last update
    #    This means the failure has repeated, and we don't want to send
    #    duplicate notification.
    [ -f "$al_update_file" ] && cmp -s $out_file $al_update_file &&
        notify=0
fi

# Update state file
cat > $al_state_file <<EOF
$(date)
yum:$status_yum
ksplice:$status_ksplice
EOF

# Record update details
cp -f $out_file $al_update_file

# Add summary
summary_file=$out_file.summary
cat > $summary_file <<SUM
+------------------------------------------------------------------------+
|  Summary ($(date))                                |
+------------------------------------------------------------------------+
Yum updates installed: $status_yum
Ksplice updates installed: $status_ksplice
Uptime:$(uptime)
SUM

summary=$(read_file $summary_file)

# Insert summary
cat $out_file >> $summary_file
mv -f $summary_file $out_file

# Append detected exploit attempts here.
exploit_attempt=$(journalctl -b | grep "exploit attempt detected;")
if [ -n "$exploit_attempt" ]; then
    echo "+------------------------------------------------------------------------+" | tee -a $out_file
    echo "|  Known exploit attempt(s) detected                                     |" | tee -a $out_file
    echo "+------------------------------------------------------------------------+" | tee -a $out_file
    echo "$exploit_attempt" | tee -a $out_file
fi

# Append Ksplice updates status
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Ksplice updates status                                                |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
if command -v ksplice &>/dev/null; then
    echo "Running 'ksplice all show'." | tee -a $out_file
    ksplice all show 2>&1 | tee -a $out_file
else
    echo "Running 'uptrack-show'." | tee -a $out_file
    uptrack-show | tee -a $out_file
fi

# Append needs-restarting status
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Needs-restarting status                                               |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'needs-restarting'." | tee -a $out_file
needs-restarting 2>&1 | tee -a $out_file
echo "--------------------------------------------------------------------------" | tee -a $out_file
echo "Running 'needs-restarting --services'." | tee -a $out_file
needs-restarting --services 2>&1 | tee -a $out_file
echo "--------------------------------------------------------------------------" | tee -a $out_file
echo "Running 'needs-restarting --reboothint'." | tee -a $out_file
needs-restarting --reboothint 2>&1 | tee -a $out_file

echo "$summary"

# send notification
if [ $notify -eq 1 ]; then
    echo
    title=$(generate_message_title)
    al-notify -t "$title" -f "$out_file"
fi

# update log
cat $out_file >> $log_file
rm -f $out_file

# finally remove the lock
release_lock
