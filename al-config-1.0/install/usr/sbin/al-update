#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#
# al-update:
# - yum-cron - yum upgrade
# - ksplice kernel, user upgrade
# - report ksplice all show
# - report needs-restarting
# - send notification if needed

. /usr/lib/al-config/functions

usage() {
    cat >&2 << EOF
Usage: $0 [OPTION]...
 -h This message
EOF
    exit 1
}

generate_message_title () {
    local s=""
    # default title:
    local title="AL: Status update on instance $(hostname)"
    # set titile to "updates installed"
    if [ $status_ksplice_kernel = yes -o $status_ksplice_user = yes \
         -o $status_yum = yes ]; then
        if [ $status_ksplice_kernel = yes -o $status_ksplice_user = yes ]; then
            s="Ksplice"
            [ $status_yum = yes ] && s="Ksplice and Yum"
            s="$s updates installed"
        else
            [ $status_yum = yes ] && s="Yum updates installed"
        fi
    fi
    # set title to "upgrade failed"
    if [ $status_ksplice_kernel = failed -o $status_ksplice_user = failed \
         -o $status_yum = failed ]; then
        if [ $status_ksplice_kernel = failed -o \
             $status_ksplice_user = failed ]; then
            s="Ksplice"
            [ $status_yum = failed ] && s="Ksplice and Yum"
            s="$s upgrade failed"
        else
            [ $status_yum = failed ] && s="Yum upgrade failed"
        fi
    fi

    [ -n "$s" ] && title="AL: $s on instance $(hostname)"

    echo "$title"
}

run_as_root_check

while getopts "h" OPTION; do
    case "$OPTION" in
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
done

lock_file=/var/run/$(basename $0).lock
if [ -e $lock_file ]; then
    echo "$0 is already running." >&2
    echo "If you are sure it is not running, please delete $lock_file and re-run." >&2
    exit 1
fi
touch $lock_file

source_config_file

## status
# Types of status:
# 1. Updates installed: yes
# 2. No updates installed: no
# 3. Upgrade failed: failed

# set default status to no
status_yum=no
status_ksplice_kernel=no
status_ksplice_user=no

# notify ?
notify=0

# work dir
work_dir=/var/run/al-config
mkdir -p $work_dir

# temp file that contains command outputs
out_file=$(mktemp $work_dir/msg_XXXX)

### Update starts ###

# yum-cron
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Yum upgrade report                                                    |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'yum-cron' with update cmd: default." | tee -a $out_file
yum-cron $yum_cron_config_file 2>&1 | tee -a $out_file
[ ${PIPESTATUS[0]} -ne 0 ] && status_yum=failed

# new updates - The updates were successfully applied
# no new updates -
if tail $out_file | grep -q "^The updates were successfully applied"; then
    status_yum=yes
fi

# Pre-configure ksplice and yum for AL here
# in case ksplice-tools, uptrack or yum-cron get updated at this point.
/usr/lib/al-config/pre_config.sh

# ksplice kernel upgrade
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Ksplice kernel upgrade report                                         |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'uptrack-upgrade -y'." | tee -a $out_file
uptrack-upgrade -y 2>&1 | tee -a $out_file
[ ${PIPESTATUS[0]} -ne 0 ] && status_ksplice_kernel=failed

# new updates: Installing
# new rollback: Removing?
# no new updates: Nothing to be done.
if ! tail $out_file | grep -q "^Nothing to be done."; then
    if tail $out_file | egrep -q "^Installing|^Removing"; then
        status_ksplice_kernel=yes
    fi
fi

# ksplice user-space upgrade
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Ksplice user-space upgrade report                                     |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'ksplice -y user upgrade'." | tee -a $out_file
ksplice -y user upgrade 2>&1 | tee -a $out_file
[ ${PIPESTATUS[0]} -ne 0 ] && status_ksplice_user=failed

# new package updates - Complete!
# new live patches - Done!
# no new updates - No packages marked for update
#                  Nothing to do.
if ! tail $out_file | grep -q "^Nothing to do."; then
    if egrep -q "^Complete!|^Done!" $out_file; then
        status_ksplice_user=yes
    fi
fi
### Update is done ###

# Set notify
# When do we notify?
# 1. No yum, ksplice_kernel, ksplice_user updates: *Do Not Notify*
#      1) *Notify If* there is no last update
#         This means this is the first update, we want to notify with
#         "Status update"
#      2) *Notify If* - last update failed
#         This means the failure has recovered, and we want to notify with
#         "Status update".
# 2. Yum, ksplice_kernel or ksplice_user updates installed: *Always Notify*
# 3. Yum, ksplice_kernel or ksplice_user upgrade failed: *Notify*
#      1) *Do Not Notify If* - failure is same as last update
#         This means the failure has repeated, and we don't want to send
#         duplicate notification.
#
# so we record every update
# - update details for failures
# - update status, yum, ksplice kernel and user-space

# 1. No yum, ksplice_kernel, ksplice_user updates: *Do Not Notify*
if [ "$status_yum" = no -a "$status_ksplice_kernel" = no -a \
     "$status_ksplice_user" = no ]; then
    notify=0
    # 1) *Notify If* there is no last update
    # This means this is the first update, we want to notify with
    # Status update"
    [ ! -f "$al_state_file" -o ! -f "$al_update_file" ] &&
        notify=1
    # 2) *Notify If* - last update failed
    #    This means the failure has recovered, and we want to notify with
    #    "Status update".
    [ -f "$al_state_file" ] && grep -q failed "$al_state_file" &&
        notify=1
fi

# 2. Yum, ksplice_kernel or ksplice_user updates installed: *Always Notify*
[ "$status_yum" = yes -o "$status_ksplice_kernel" = yes -o \
     "$status_ksplice_user" = yes ] &&
    notify=1

# 3. Yum, ksplice_kernel or ksplice_user upgrade failed: *Notify*
if [ "$status_yum" = failed -o "$status_ksplice_kernel" = failed -o \
     "$status_ksplice_user" = failed ]; then
    notify=1
    # 1) *Do Not Notify If* - failure is same as last update
    #    This means the failure has repeated, and we don't want to send
    #    duplicate notification.
    [ -f "$al_update_file" ] && cmp -s $out_file $al_update_file &&
        notify=0
fi

# Update state file
cat > $al_state_file <<EOF
$(date)
yum:$status_yum
ksplice_kernel:$status_ksplice_kernel
ksplice_user:$status_ksplice_user
EOF

# Record update details
cp -f $out_file $al_update_file

# Add summary
summary_file=$out_file.summary
cat > $summary_file <<SUM
+------------------------------------------------------------------------+
|  Summary ($(date))                                |
+------------------------------------------------------------------------+
Yum updates installed: $status_yum
Ksplice kernel updates installed: $status_ksplice_kernel
Ksplice user-space updates installed: $status_ksplice_user
Uptime:$(uptime)

SUM

summary=$(read_file $summary_file)

# Insert summary
cat $out_file >> $summary_file
mv -f $summary_file $out_file

# Append Ksplice updates status
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Ksplice updates status                                                |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'ksplice all show'." | tee -a $out_file
ksplice all show 2>&1 | tee -a $out_file

# Append needs-restarting status
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "|  Needs-restarting status                                               |" | tee -a $out_file
echo "+------------------------------------------------------------------------+" | tee -a $out_file
echo "Running 'needs-restarting'." | tee -a $out_file
needs-restarting 2>&1 | tee -a $out_file
echo "--------------------------------------------------------------------------" | tee -a $out_file
echo "Running 'needs-restarting --services'." | tee -a $out_file
needs-restarting --services 2>&1 | tee -a $out_file
echo "--------------------------------------------------------------------------" | tee -a $out_file
echo "Running 'needs-restarting --reboothint'." | tee -a $out_file
needs-restarting --reboothint 2>&1 | tee -a $out_file

echo "$summary"

# send notification
if [ $notify -eq 1 ]; then
    echo
    title=$(generate_message_title)
    al-notify -t "$title" -f "$out_file"
fi

# update log
cat $out_file >> $log_file
rm -f $out_file

# finally remove the lock
rm -f $lock_file
