#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#

export PATH=/usr/sbin:/usr/bin:/sbin:/bin

config_dir=/etc/al-config
config_file=$config_dir/al.conf
oci_cli_config_file=$config_dir/oci_cli.conf
oci_api_key_file=$config_dir/oci_api_key.pem
yum_cron_config_file=$config_dir/yum-cron.conf
al_state_file=/var/lib/al-config/state
al_update_file=/var/lib/al-config/update
al_cron_job_file=/etc/cron.d/al-update
log_file=/var/log/al.log

work_dir=/var/run/al-config
mkdir -p $work_dir

log() {
    echo "$*"
    echo "$(date) - $*" >> "$log_file"
}

source_config_file() {
    if [ ! -f "$config_file" ]; then
        echo "$config_file doesn't exist." >&2
        exit 1
    fi
    . "$config_file"
}

run_as_root_check() {
    if [ $(id -u) != 0 ]; then
        echo "Please run as root." >&2
        exit 1
    fi
}

acquire_lock() {
    local lock_file=/var/run/$(basename $0).lock
    if [ -e $lock_file ]; then
        echo "$0 is already running." >&2
        echo "If you are sure it is not running, please delete $lock_file and re-run." >&2
        exit 1
    fi
    touch $lock_file
}

release_lock() {
    local lock_file=/var/run/$(basename $0).lock
    rm -f $lock_file
}

read_file() {
    local f="$1"
    if [[ $f =~ ^(https?|ftp|file):// ]]; then
        curl -sfm 25 "$f" 2>/dev/null
    else
        if [ -r "$f" ]; then
            cat "$f"
        fi
    fi
}

get_instance_name() {
    curl -sfm 25 http://169.254.169.254/opc/v1/instance/displayName
}

is_known_exploit_detection_activated() {
    local activated
    if [ -e /proc/sys/kernel/known_exploit_detection ]; then
        activated=$(cat /proc/sys/kernel/known_exploit_detection)
        [ "$activated" = 1 ] && return 0
    fi
    return 1
}

enable_known_exploit_detection() {
    if [ -f /etc/uptrack/uptrack.conf ]; then
        if ! grep -q 'Known-Exploit-Detection' /etc/uptrack/uptrack.conf; then
            cat >> /etc/uptrack/uptrack.conf <<EOF

[Known-Exploit-Detection]
# Known Exploit Detection is another way Ksplice secures your system.
# Ksplice continues to close down vulnerabilities with zero downtime.
# And now you have the added security of being notified when attempted
# privilege escalation attacks are taken on your system.
enabled = yes
EOF
        fi
    fi
}

activate_known_exploit_detection() {
    enable_known_exploit_detection
    ksplice -y kernel upgrade &>/dev/null
}
